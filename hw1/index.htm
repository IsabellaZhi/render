<html><head>
<title>Homework1, yz952</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <!-- <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css"> -->
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>

  .neighborhood {
    fill: #000000;
    stroke: white;
    stroke-width: 2px;
  }

  #container {
    display: flex;
    justify-content: space-between;
    padding: 20px;
  }

  #map {
    width: 58%;
  }

  body {
      background-color: black;
      color: white;
  }

  #scatter {
    width: 38%;
    height: 600px;
    padding: 10px;
  }

  .center {
    text-align: center;
    font-size: 20px;
    font-family: 'Lato';
    color: white;
  }

  .legend {
    font-size: 15px;
    font-family: 'Lato';
    fill: white;
  }
  .label {
   font-size: 15px;
   font-family: 'Lato';
   fill: white;
 }

  </style>

</head>
<body>

    <div id="container">
      <div id="map">
        <div class="center">Diameter (breast height) of Public Owned Trees in Sanfrancisco</div>
        <svg id="treedia" height="700" width="700" style="background: #000000; margin-top:20px"></svg>
      </div>

      <div id="scatter">
        <div class="center">Age to Diameter of Public-owned Trees in San Francisco</div>
        <div class="center" id="scatter1div"><svg id="scatter1" height="500" width="500" style="background: #000000; margin-top:150px"></svg></div>
      </div>
    </div>

  <script>

  const svg = d3.select("#treedia");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");


  const requestData = async function() {

    const sf = await d3.json("./SF-Neighborhoods.json");
    console.log(sf);

    var neighborhoods = topojson.feature(sf, sf.objects.SFNeighborhoods);
    var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods);
    var path = d3.geoPath().projection(projection);


    map.selectAll("path.neighborhood").data(neighborhoods.features)
      .join("path")
      .attr("class", "neighborhood")
      .attr("d", path);


    const trees = await d3.csv("./Street_Tree_List-2022-01-30_FILTERED.csv");
    const treesyears = await d3.csv("./filtered_years.csv");
    const dpw = treesyears.filter(d => d.qCaretaker === 'DPW');
    const dpwtrees = trees.filter(d => d.qCaretaker === 'DPW');
    const privatetrees = trees.filter(d => d.qCaretaker === 'Private');


    trees.forEach( d => {
      d.Position = projection( [d.Longitude, d.Latitude] );

    });

    map.selectAll("circle").data(dpwtrees)
       .join("circle")
       .attr("r", function(d){if(d.DBH > 80){return 22;}
                                 else if(d.DBH > 40){return 16;}
                                 else if(d.DBH > 20){return 9;}
                                 else if(d.DBH > 9){return 5;}
                                 else{return 2;}})
       .attr("opacity", 0.1)
       .attr("cx", d => d.Position[0])
       .attr("cy", d => d.Position[1])
         .attr('fill',
          function(d){if(d.DBH >= 80){return '#CA46FF';}
         //                           else if(d.DBH > 10){return '#186A3B';}
         //                           else if(d.DBH > 5){return '#4A9A6C';}
                                    else{return '#7EFF66';}
                                }
                           );

       const legend = svg.append("g")
         //.attr("class", "legend")
         .attr("transform", "translate(" + 40 + "," + 20 + ")") // Position the legend
         .selectAll("g")
         //.text("Diameter at Breast Height (DBH)")
         .data([
           {radius: 22, label: "> 80 DBH", color: '#CA46FF'},
           {radius: 16, label: "> 40 DBH", color: '#7EFF66'},
           {radius: 9, label: "20 - 40 DBH", color: '#7EFF66'},
           {radius: 5, label: "9 - 20 DBH", color: '#7EFF66'},
           {radius: 2, label: "<= 9 DBH", color: '#7EFF66'}
         ])
         .enter().append("g");

       legend.append("circle")
         .attr("cy", (d, i) => i * 40)
         .attr("r", d => d.radius)
         .attr("fill", d => d.color)
         .attr("opacity", 0.8);

       legend.append("text")
         .attr("class","legend")
         .attr("x", 40)
         .attr("y", (d, i) => i * 40)
         .attr("dy", "0.7em")
         .text(d => d.label);

    // second part - scatter
   const svgscatter = d3.select('#scatter1');
   const widthscatter = svgscatter.attr('width');
   const heightscatter = svgscatter.attr('height');
   const margins = {top: 10, right: 10, bottom: 50, left: 50};
   const chartWidth = widthscatter - margins.left - margins.right;
   const chartHeight = heightscatter - margins.top - margins.bottom;

   const xExtent = d3.extent(treesyears, d => +d['Years']);
   const xScale = d3.scaleLinear().domain(xExtent).range([0, chartWidth]);
   const yExtent = d3.extent(treesyears, d => +d['DBH']);
   const yMax = d3.max(treesyears, d => +d['DBH']);
   const yScale = d3.scaleLog().domain([1, yMax]).range([chartHeight, 0]);

   // y-axis and horizontal gridlines
   let leftAxis = d3.axisLeft(yScale).tickFormat(d3.format(".0f"));
   svgscatter.append('g')
       .attr('class', 'y axis')
       .attr('transform',`translate(${margins.left-5},${margins.top})`)
       .call(leftAxis);
   let leftGridlines = d3.axisLeft(yScale)
                         .tickSize(-chartWidth-10)
                         .tickFormat('');
   svgscatter.append('g')
       .attr('class', 'gridlines')
       .attr('transform',`translate(${margins.left-5},${margins.top})`)
       .call(leftGridlines);

   // x-axis and verticle gridlines
   let bottomAxis = d3.axisBottom(xScale);
   svgscatter.append('g')
       .attr('class', 'x axis')
       .attr('transform',`translate(${margins.left+5},${chartHeight+20})`)
       .call(bottomAxis);
   let bottomGridlines = d3.axisBottom(xScale)
                           .tickSize(-chartWidth-10)
                           .tickFormat('');
   svgscatter.append('g')
       .attr('class', 'gridlines')
       .attr('transform',`translate(${margins.left+5},${chartHeight+20})`)
       .call(bottomGridlines);

   svgscatter.append("text")
       .attr("class", "label")
       .attr("text-anchor", "end")
       .attr("x", margins.left + chartWidth / 2)
       .attr("y", heightscatter - 6)
       .text("Age");

   // Y-axis label
   svgscatter.append("text")
       .attr("class", "label")
       .attr("text-anchor", "end")
       .attr("y", 6)
       .attr("dy", ".75em")
       .attr("transform", "rotate(-90)")
       .attr("transform", `translate(${0},${chartHeight / 2 - margins.left})rotate(-90)`)
       .text("Diameter");


   dpw.forEach((d) => {
       svgscatter.append("circle")
           .attr("cx", xScale(d["Years"]) + margins.left+5)
           .attr("cy", yScale(d["DBH"])+10)
           .attr("r", 2.7)
           .style("opacity", 0.3)
           .attr('fill',"#7EFF66"
           // function() {
           //     if(d.qCaretaker == 'DPW'){ return 'blue'; }
           //     else if(d.qCaretaker == 'Private'){ return '#CA6F1E'; }
           //     else{ return 'red'; }}
           );

   });

}
  requestData();







  </script>







  </div>
</body>
</html>
